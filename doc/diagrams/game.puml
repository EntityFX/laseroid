@startuml

abstract class Actor {
    # hexi : Hexi
    # game : Game
    # main : Main 

    + life : number
    + initialLife : number
    # sprite : "Hexi.Sprite"

    + {abstract} move()
    + {abstract} update()
    + setPosition(position : {x, y}) 

    + remove()  
    + hit()  
}

class WeaponedActor {
    # automatedWeapons : Array
    # canShoot : boolean
    - isWeaponShooting : boolean

    + startShoot()
    + stopShoot()  
    + onShootStarted()    
    + onShootStopped()    
    + updateShooting()    
}

class Enemy {
    + type : string
    # syncWeapons : JSON

    #movementEngine : MovementEngine
    +shipConfiguration : JSON

    + setWeapon()
    - shootWithWeapon()
    - setLifeLine()

        + hit()  
}

class Player {
    # weapons : Array
    # collisionSprite : "Hexi.Sprite"

    - weaponLifeLevels : Array<int>
    - invisibilityCounter : number

    + upgrade()
    + downgrade()

    # shootWithLaser(currentWeapon, weapon)
    # shootWithBullets(currentWeapon, weapon)
    # setWeapon()
    # setLife(life: number)
    # hitUpgrade(upgradeItem)
}

class MovementEngine {
    # movementsConfiguration: JSON
    # firstMovementConfiguration : JSON
    # movementItensity : number
    # movementItensityCounter : number 
    # movementItensitySlot : number   
    + isBounceBottom : boolean

    # setMovement()
    + updateMovement()
}

class Bonus {
    + type : string

    # movementEngine : MovementEngine
    + shipConfiguration : JSON
    # upgradeBonus : JSON

    # shootWithUpgrade(upgradeBonus : JSON)
}

class Game {
    + level : JSON
    + score : JSON
    - bulletsController : BulletsController
    - enemyController : EnemyController  
    - player : Player   

    # hexi : Hexi

    + onEnemyDestroyed : Function
    + onLevelChanged : Function

    + clearShips()
    + setupLevel(currentWave)
    + nextLevel()
    + previousLevel()
    + forwardLevel()
    + rewindLevel()
    + restoreState(gameState: JSON)
    + resetGame()
    + update()
    + enemyDestroyed()
}

class EnemyController {
    # enemies : Array<Enemy>
    # bonuses : Array<Bonus>
    # player : Player
    # upgrades : Array

    + isLevelCompleted()
    + update()
    + clear()
}

class BulletsController {
    # playerBullets : Array
    # enemyBullets : Array
    # explosionSplashes : Array 
    # playerLaser : Object

    + update()
    + clear()
    # updatePlayerBullets()
    # updatePlayerLaser()
    # updateEnemyBullets()
    # updateExplosions()
}

class Main {
    # {static} resources : Array<string>
    # {static} sounds : Map<string, string>

    + gameScene : Hexi.Scene
    - inputDevice : InputDevice
    # hexi : Hexi
    # game : Game
    # gameStorage : GameStorage

    + init()
    + load()
    + setup()
    + playLoop()
    + nextLevel()
    + saveGame()
    + loadGame()

    # levelChanged(currentWave)
    # changeState()
}

class MainScreen {

}

class GameStorage {
    - game : Game

    + save()
    + load()
}

class InputDevice {
    - game : Game

    + init()

    + loadTapped()
    + storeTapped()
    + resetTapped()
    + pauseTapped()
}

class Hexi {
    + stage : Stage
    + canvas : Canvas

    + start()
    + move(sprite)
    + sprite()
    + json()
    + pause()
    + resume()
}


Actor <|-- WeaponedActor 
WeaponedActor <|-- Enemy
WeaponedActor <|-- Player
Actor <|-- Bonus
Game "1" *-- "1" BulletsController
Game "1" *-- "1" EnemyController
Game "1" *-- "1" Player
Game "1" *-- "1" InputDevice
Game "1" *-- "1" GameStorage
MovementEngine "1" *-- "1" Enemy
EnemyController "1" *-- "*" Bonus
EnemyController "1" *-- "*" Enemy
BulletsController <-- Actor
Hexi "1" o-- "1" Actor
Hexi "1" o-- "1" Main
Main "1" *-- "1" Game

@enduml